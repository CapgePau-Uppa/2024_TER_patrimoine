{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nclass CarteComponent {\n  constructor() {}\n  ngAfterViewInit() {\n    if (typeof this.map === 'undefined') {\n      this.createMap();\n      // this.addMonuments();\n      this.getUserLocation();\n    }\n  }\n  // Creation of the map with the coordinates of France\n  createMap() {\n    const franceCenter = {\n      lat: 46.603354,\n      lng: 1.888334\n    };\n    // Initial zoom level of the map\n    const zoomLevel = 6;\n    // Creation of the Leaflet map\n    this.map = L.map('map', {\n      center: [franceCenter.lat, franceCenter.lng],\n      zoom: zoomLevel\n    });\n    // Adding an OpenStreetMap layer\n    const mainLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      minZoom: 2,\n      maxZoom: 19\n      // attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    });\n\n    mainLayer.addTo(this.map);\n  }\n  // Adding a monument using these coordinates\n  /*addMonuments() {\n    const monuments = [\n      { name: 'Tour Eiffel', lat: 48.8584, lng: 2.2945 },\n      { name: 'Basilique Saint-Sernin', lat: 43.6047, lng: 1.4432 },\n      { name: 'Château de Pau', lat: 43.2988, lng: -0.3707 }\n    ];\n       // Marker\n    monuments.forEach(monument => {\n      L.marker([monument.lat, monument.lng]).addTo(this.map!).bindPopup(monument.name).openPopup();\n    });\n  }*/\n  // Get the user's position\n  getUserLocation() {\n    const menIcon = L.icon({\n      iconUrl: '../assets/men.png',\n      iconSize: [22, 50],\n      popupAnchor: [0, -30]\n    });\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const userLat = position.coords.latitude;\n        const userLng = position.coords.longitude;\n        // Centering on the position\n        this.map.setView([userLat, userLng], 16); // 16 = level of zoom\n        L.marker([userLat, userLng], {\n          icon: menIcon\n        }).addTo(this.map).bindPopup('Your position').openPopup();\n      }, error => {\n        console.error('Geolocation error : ', error);\n      });\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n    }\n  }\n}\nCarteComponent.ɵfac = function CarteComponent_Factory(t) {\n  return new (t || CarteComponent)();\n};\nCarteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CarteComponent,\n  selectors: [[\"app-carte\"]],\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"map-wrapper\"], [1, \"map-border\"], [\"id\", \"map\"]],\n  template: function CarteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  styles: [\".map-wrapper[_ngcontent-%COMP%] {\\r\\n  position: relative;\\r\\n  height: 100vh;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n.map-border[_ngcontent-%COMP%] {\\r\\n  border: 1px solid white;\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n#map[_ngcontent-%COMP%] {\\r\\n  height: 100%;\\r\\n  width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2FydGUvY2FydGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsVUFBVTtBQUNaOztBQUVBO0VBQ0UsdUJBQXVCO0VBQ3ZCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFlBQVk7RUFDWixXQUFXO0FBQ2IiLCJzb3VyY2VzQ29udGVudCI6WyIubWFwLXdyYXBwZXIge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIHotaW5kZXg6IDE7XHJcbn1cclxuXHJcbi5tYXAtYm9yZGVyIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbiNtYXAge1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});\nexport { CarteComponent };","map":{"version":3,"names":["L","CarteComponent","constructor","ngAfterViewInit","map","createMap","getUserLocation","franceCenter","lat","lng","zoomLevel","center","zoom","mainLayer","tileLayer","minZoom","maxZoom","addTo","menIcon","icon","iconUrl","iconSize","popupAnchor","navigator","geolocation","getCurrentPosition","position","userLat","coords","latitude","userLng","longitude","setView","marker","bindPopup","openPopup","error","console","selectors","decls","vars","consts","template","CarteComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["C:\\Users\\Easy Services Pro\\Documents\\GitHub\\2024_TER_patrimoine\\frontend-angular\\src\\app\\carte\\carte.component.ts","C:\\Users\\Easy Services Pro\\Documents\\GitHub\\2024_TER_patrimoine\\frontend-angular\\src\\app\\carte\\carte.component.html"],"sourcesContent":["import { AfterViewInit, Component } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n\r\n@Component({\r\n  selector: 'app-carte',\r\n  templateUrl: './carte.component.html',\r\n  styleUrls: ['./carte.component.css']\r\n})\r\nexport class CarteComponent implements AfterViewInit {\r\n  map: L.Map | undefined;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (typeof this.map === 'undefined') {\r\n      this.createMap();\r\n      // this.addMonuments();\r\n      this.getUserLocation();\r\n    }\r\n  }\r\n\r\n  // Creation of the map with the coordinates of France\r\n  createMap() {\r\n    const franceCenter = {\r\n      lat: 46.603354,\r\n      lng: 1.888334,\r\n    };\r\n\r\n    // Initial zoom level of the map\r\n    const zoomLevel = 6;\r\n\r\n    // Creation of the Leaflet map\r\n    this.map = L.map('map', {\r\n      center: [franceCenter.lat, franceCenter.lng], // Centering on France\r\n      zoom: zoomLevel\r\n    });\r\n\r\n    // Adding an OpenStreetMap layer\r\n    const mainLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      minZoom: 2,\r\n      maxZoom: 19,\r\n      // attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    });\r\n\r\n    mainLayer.addTo(this.map);\r\n  }\r\n\r\n  // Adding a monument using these coordinates\r\n  /*addMonuments() {\r\n    const monuments = [\r\n      { name: 'Tour Eiffel', lat: 48.8584, lng: 2.2945 },\r\n      { name: 'Basilique Saint-Sernin', lat: 43.6047, lng: 1.4432 },\r\n      { name: 'Château de Pau', lat: 43.2988, lng: -0.3707 }\r\n    ];\r\n\r\n    // Marker\r\n    monuments.forEach(monument => {\r\n      L.marker([monument.lat, monument.lng]).addTo(this.map!).bindPopup(monument.name).openPopup();\r\n    });\r\n  }*/\r\n\r\n\r\n\r\n  // Get the user's position\r\n  getUserLocation() {\r\n    const menIcon = L.icon({\r\n      iconUrl: '../assets/men.png',\r\n      iconSize:     [22, 50], // width, height\r\n      popupAnchor:  [0, -30]\r\n    });\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        const userLat = position.coords.latitude;\r\n        const userLng = position.coords.longitude;\r\n\r\n        // Centering on the position\r\n        this.map!.setView([userLat, userLng], 16); // 16 = level of zoom\r\n\r\n        L.marker([userLat, userLng], {icon: menIcon}).addTo(this.map!).bindPopup('Your position').openPopup();\r\n\r\n        }, error => {\r\n        console.error('Geolocation error : ', error);\r\n      });\r\n\r\n    } else {\r\n      console.error('Geolocation is not supported by this browser.');\r\n    }\r\n  }\r\n}\r\n","<div class=\"map-wrapper\">\r\n    <div class=\"map-border\">\r\n      <div id=\"map\"></div>\r\n    </div>\r\n</div>\r\n"],"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,SAAS;;AAE5B,MAKaC,cAAc;EAGzBC,YAAA,GAAgB;EAEhBC,eAAeA,CAAA;IACb,IAAI,OAAO,IAAI,CAACC,GAAG,KAAK,WAAW,EAAE;MACnC,IAAI,CAACC,SAAS,EAAE;MAChB;MACA,IAAI,CAACC,eAAe,EAAE;;EAE1B;EAEA;EACAD,SAASA,CAAA;IACP,MAAME,YAAY,GAAG;MACnBC,GAAG,EAAE,SAAS;MACdC,GAAG,EAAE;KACN;IAED;IACA,MAAMC,SAAS,GAAG,CAAC;IAEnB;IACA,IAAI,CAACN,GAAG,GAAGJ,CAAC,CAACI,GAAG,CAAC,KAAK,EAAE;MACtBO,MAAM,EAAE,CAACJ,YAAY,CAACC,GAAG,EAAED,YAAY,CAACE,GAAG,CAAC;MAC5CG,IAAI,EAAEF;KACP,CAAC;IAEF;IACA,MAAMG,SAAS,GAAGb,CAAC,CAACc,SAAS,CAAC,oDAAoD,EAAE;MAClFC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;MACT;KACD,CAAC;;IAEFH,SAAS,CAACI,KAAK,CAAC,IAAI,CAACb,GAAG,CAAC;EAC3B;EAEA;EACA;;;;;;;;;;;EAeA;EACAE,eAAeA,CAAA;IACb,MAAMY,OAAO,GAAGlB,CAAC,CAACmB,IAAI,CAAC;MACrBC,OAAO,EAAE,mBAAmB;MAC5BC,QAAQ,EAAM,CAAC,EAAE,EAAE,EAAE,CAAC;MACtBC,WAAW,EAAG,CAAC,CAAC,EAAE,CAAC,EAAE;KACtB,CAAC;IAEF,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACC,QAAQ,IAAG;QAClD,MAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;QACxC,MAAMC,OAAO,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;QAEzC;QACA,IAAI,CAAC3B,GAAI,CAAC4B,OAAO,CAAC,CAACL,OAAO,EAAEG,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAE3C9B,CAAC,CAACiC,MAAM,CAAC,CAACN,OAAO,EAAEG,OAAO,CAAC,EAAE;UAACX,IAAI,EAAED;QAAO,CAAC,CAAC,CAACD,KAAK,CAAC,IAAI,CAACb,GAAI,CAAC,CAAC8B,SAAS,CAAC,eAAe,CAAC,CAACC,SAAS,EAAE;MAErG,CAAC,EAAEC,KAAK,IAAG;QACXC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;KAEH,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;;EAElE;;AAhFWnC,cAAc,C;mBAAdA,cAAc;AAAA;AAAdA,cAAc,C;QAAdA,cAAc;EAAAqC,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCR3BE,EAAA,CAAAC,cAAA,aAAyB;MAEnBD,EAAA,CAAAE,SAAA,aAAoB;MACtBF,EAAA,CAAAG,YAAA,EAAM;;;;;SDKGhD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}